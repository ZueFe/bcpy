#!/usr/bin/python
# Compute event-related de/synchronizations (ERD/Ss) around stimulation points
# Show multiple options for offset and duration of the ERD patterns,
# printing a table with duration and offset on each side.
#
# Usage: bcpy-mi-erds-explore signal.csv stimulations.csv

import os
import sys
sys.path.append(os.path.abspath('..'))
import bcpy
from bcpy.erd import erd

baseline = 2


def get_cspd_erd(offset, duration):
    ch0 = "sFiltered 0"
    ch1 = "sFiltered 1"

    def compute():
        erd1, _ = eegdata.compute_erds_using_squared(ch0, 769, offset,
                                                     duration, baseline)
        erd2, _ = eegdata.compute_erds_using_squared(ch1, 770, offset,
                                                     duration, baseline)
        erd1 = float(erd1)
        erd2 = float(erd2)
        return erd1, erd2

    erd1, erd2 = compute()
    ch0, ch1 = ch1, ch0
    erd3, erd4 = compute()

    # if erd1 + erd2 < erd3 + erd4:
    #     return erd1, erd2
    # else:
    #     return erd3, erd4
    return erd1, erd2, erd3, erd4

eegdata = bcpy.BCPy(str(sys.argv[1]), str(sys.argv[2]))
eegdata.filter_channels(8, 30)
eegdata.compute_bp()

o = (0.5, 1, 1.5, 2)
d = (4, 3.5, 3, 2.5)

sys.stdout.write("Duration: ")
for duration in d:
    sys.stdout.write(str(duration) + " seconds\t\t\t")
print
for offset in o:
    l1 = list()
    l2 = list()
    l1.append(str("%3.1f" % offset) + ": ")
    l2.append(str("%3.1f" % offset) + ": ")
    for duration in d:
        erd1, erd2, erd3, erd4 = get_cspd_erd(offset, duration)
        if (erd1 + erd2) > (erd3 + erd4):
            erd1, erd2, erd3, erd4 = erd3, erd4, erd1, erd2
        l1.append("ERD: L=" + str("%6.2f" % float(erd1)) + "%, R="
                  + str("%6.2f" % float(erd2)) + "%\t")
        l2.append("ERS: R=" + str("%6.2f" % float(erd4)) + "%, L="
                  + str("%6.2f" % float(erd3)) + "%\t")
    for x in l1:
        sys.stdout.write(x)
    print
    for x in l2:
        sys.stdout.write(x)
    print
    print
print "^ Offset (seconds)"
