#!/usr/bin/python
# Compute event-related de/synchronizations (ERD/Ss) around stimulation points
# and show the plots of their courses.
# Command-line arguments are parsed as options
#
# The current implementation takes Openvibe CSP filtered channels and displays
# ERDs for both possibilities (two channels versus two hands) resulting in
# four ERD combinations in two batches. The channels are named 'sFiltered 0'
# and 'sFiltered 1'. However all this should be easily adjustable for other
# settings (e.g. C3 and C4 sensors).

import os
import sys
import getopt
sys.path.append(os.path.abspath('..'))
import bcpy
from bcpy.erd import erd
from bcpy.funcs import plot_data

duration = 4
baseline = 2
offset = 0.5
freqlow = 8
freqhigh = 30

usage = '''bcpy-mi-erds: analyze motor imagery event related de/synchronizations

    -s --signal     CSV with signal
    -t --stimuls    CSV with stimulations
    -x --lowfreq    Lower bound for frequency filtering in Hz (default=8)
    -y --highfreq   Higher bound for frequency filtering in Hz (default=30)
    -b --baseline   Length of baseline in seconds (default=2)
    -d --duration   Length of the active period in seconds (default=4)
    -o --offset     Length of the offset period in seconds (default=0.5)
    -h --help       This fancy message
'''


def get_cspd_erd():
    ch0 = "sFiltered 0"
    ch1 = "sFiltered 1"

    def compute():
        erd1, plot1 = eegdata.compute_erds_using_squared(ch0, 769, offset,
                                                         duration, baseline)
        erd1 = float(erd1)
        erd2, plot2 = eegdata.compute_erds_using_squared(ch1, 770, offset,
                                                         duration, baseline)
        erd2 = float(erd2)
        return erd1, erd2, plot1, plot2

    erd1, erd2, plot1, plot2 = compute()
    ch0, ch1 = ch1, ch0
    erd3, erd4, plot3, plot4 = compute()

    return erd1, erd2, erd3, erd4, plot1, plot2, plot3, plot4

argv = sys.argv[1:]

try:
    signalfile = str(sys.argv[1])
    stimulfile = str(sys.argv[2])
except IndexError:
    pass

try:
    opts, args = getopt.getopt(
        argv, "s:t:x:y:b:d:o:",
        ["lowfreq=", "highfreq=",
         "baseline=", "duration=", "offset=",
         "signal=", "stimuls="])
except getopt.GetoptError:
    print usage
    sys.exit(2)
for opt, arg in opts:
    if opt in ("-h", "--help"):
        print usage
        sys.exit()
    elif opt in ("-s", "--signal"):
        signalfile = arg
    elif opt in ("-t", "--stimuls"):
        stimulfile = arg
    elif opt in ("-x", "--lowfreq"):
        freqlow = float(arg)
    elif opt in ("-y", "--highfreq"):
        freqhigh = float(arg)
    elif opt in ("-b", "--baseline"):
        baseline = float(arg)
    elif opt in ("-d", "--duration"):
        duration = float(arg)
    elif opt in ("-o", "--offset"):
        offset = float(arg)

try:
    eegdata = bcpy.BCPy(signalfile, stimulfile)
except (UnboundLocalError, NameError):
    print """You need to specify at least signal and stimulation files.

""" + usage
    sys.exit(2)

eegdata.filter_channels(freqlow, freqhigh)
eegdata.compute_bp()
erd1, erd2, erd3, erd4, plot1, plot2, plot3, plot4 = get_cspd_erd()
if (erd1 + erd2) > (erd3 + erd4):
    erd1, erd2, erd3, erd4 = erd3, erd4, erd1, erd2
    plot1, plot2, plot3, plot4 = plot3, plot4, plot1, plot2
print ("ERD: L=" + str("%.2f" % float(erd1)) +
       "%\tR=" + str("%.2f" % float(erd2)) + "%")
plot_data(plot1, label="ERD1 (left)")
plot_data(plot2, label="ERD1 (right)")
eegdata.plot_show()

print ("ERS: L=" + str("%.2f" % float(erd3)) +
       "%\tR=" + str("%.2f" % float(erd4)) + "%")
plot_data(plot3, label="ERD2 (left)")
plot_data(plot4, label="ERD2 (right)")
eegdata.plot_show()
